MODULE main
VAR
	state : { a, b, z};
	decryp: { EaM, EbM, EzM, m};
	to : { a, b, z };
	encryp : { EaM, EbM, EzM, m};
ASSIGN
	init(state) := a;
	init(to) := b;
	init(decryp) := m;
	init(encryp) := EbM;
	next(encryp) := case
		encryp = EaM & state = z & to = a : EaM;
		encryp = EbM & state = z & to = b : EzM;
		encryp = EzM & state = a & to = b : EbM;
		encryp = EzM & state = b & to = a : EaM;
		encryp = EzM & state = a & to = z : EaM;
		encryp = EzM & state = b & to = z : EzM;
		TRUE   			    : encryp;
	esac;
	next(state) := case
		state = a : z;
		state = b : z;
		state = z & to = b : b;
		state = z & to = a : a; 
		TRUE 			   : state;
	esac;
	next(to) := case
		state = a & to = b : b;
		state = z & to = b : z;
		state = b & to = z : z;
		TRUE  			  : to;
	esac;
	next(decryp) := case
		encryp = EaM & state = z & to = a : m;
		encryp = EbM & state = z & to = b : m;
		encryp = EzM & state = a & to = b : m;
		encryp = EzM & state = b & to = a : m;
		encryp = EzM & state = a & to = z : m;
		encryp = EzM & state = b & to = z : m;
		encryp = EzM & state = z & to = z : m;
		TRUE 					 : encryp;
	esac; 
	
FAIRNESS
	state = z & decryp != m;
